version: 2.1

orbs:
  kubernetes: circleci/kubernetes@1.3

jobs:
  build-and-test:
    docker:
      # Imagen principal para el job
      - image: cimg/python:3.9
      
      # Servicio de Redis
      - image: redis:alpine
        name: redis-final
        
    steps:
      - checkout
      - setup_remote_docker
      
      # Instalar dependencias
      - run:
          name: Instalar dependencias
          command: |
            python -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt
            pip install pytest redis
            pip install pytest-cov
            pip install --upgrade pytest pytest-cov
            pip install black
            pip install ggshield
      - run:
          name: Formatear código
          command: |
            . venv/bin/activate
            black .
            black --check . 
      
      # Esperar a que Redis esté listo
      - run:
          name: Esperar inicio de Redis
          command: |
            for i in seq 10; do
              nc -z localhost 6379 && echo "Redis está listo" && break
              echo "Esperando Redis..." 
              sleep 1
            done
      
      # Ejecutar pruebas
      - run:
          name: Ejecutar pruebas
          environment:
            REDIS_HOST: redis-final
            REDIS_PORT: 6379
          command: |
            . venv/bin/activate
            pytest tests/ \
              --junitxml=test-results/junit.xml \
              --cov=. \
              --cov-report=html:test-results/coverage-html \
      
      # Guardar artefactos de tests
      - store_test_results:
          path: test-results
      
      # Guardar artefactos adicionales
      - store_artifacts:
          path: test-results
          destination: test-reports
      
  deploy:
    docker:
      - image: cimg/base:2024.02
    steps:
      - checkout
      - setup_remote_docker
      # Construcción de imagen Docker
      - run:
          name: Construir imagen Docker
          command: |
            docker build -t $DOCKERHUB_USER/$IMAGE_NAME:$CIRCLE_SHA1 .
      
      # Login a Docker Hub
      - run:
          name: Login a Docker Hub
          command: |
            echo $DOCKERHUB_PASS | docker login -u $DOCKERHUB_USER --password-stdin
      
      # Push de imagen
      - run:
          name: Push imagen a Docker Hub
          command: |
            docker push $DOCKERHUB_USER/$IMAGE_NAME:$CIRCLE_SHA1
            
  update-k8s-manifests:
    docker:
      - image: cimg/python:3.9
    steps:
      - checkout
      - run:
          name: Instalar herramientas necesarias
          command: |
            sudo apt-get update
            sudo apt-get install -y git
            pip install PyYAML
            # Configurar SSH
            mkdir -p ~/.ssh
            ssh-keyscan github.com >> ~/.ssh/known_hosts
      # Usar la clave SSH configurada
      - add_ssh_keys:
          fingerprints:
            - "${GIT_SSH_FINGERPRINT}" # La clave que ya configuraste
      - run:
          name: Configurar Git
          command: |
            git config --global user.email "ci-bot@example.com"
            git config --global user.name "CircleCI Bot"
      - run:
          name: Clonar repositorio de manifiestos K8s
          command: |
            # Clonar usando SSH
            git clone git@github.com:IsaacAM50/calculadora-manifiestos-argo.git manifests
      - run:
          name: Actualizar imagen en manifiesto
          command: |
            cd manifests
            
            # Crear un script Python separado
            echo "import yaml" > update_manifest.py
            echo "import os" >> update_manifest.py
            echo "" >> update_manifest.py
            echo "# Ruta al archivo de manifiesto" >> update_manifest.py
            echo "manifest_path = 'manifest/deployment.yaml'" >> update_manifest.py
            echo "" >> update_manifest.py
            echo "# Cargar todos los documentos YAML" >> update_manifest.py
            echo "with open(manifest_path, 'r') as f:" >> update_manifest.py
            echo "    documents = list(yaml.safe_load_all(f))" >> update_manifest.py
            echo "" >> update_manifest.py
            echo "# Buscar y actualizar el Deployment correcto" >> update_manifest.py
            echo "deployment_updated = False" >> update_manifest.py
            echo "for i, doc in enumerate(documents):" >> update_manifest.py
            echo "    # Verificar si es un Deployment" >> update_manifest.py
            echo "    if doc and doc.get('kind') == 'Deployment' and doc.get('metadata', {}).get('name') == 'flaskapp':" >> update_manifest.py
            echo "        # Buscar el contenedor correcto" >> update_manifest.py
            echo "        for container in doc['spec']['template']['spec']['containers']:" >> update_manifest.py
            echo "            if container['name'] == 'flask-app':" >> update_manifest.py
            echo "                # Actualizar la imagen" >> update_manifest.py
            echo "                new_image = os.environ['DOCKERHUB_USER'] + '/' + os.environ['IMAGE_NAME'] + ':' + os.environ['CIRCLE_SHA1']" >> update_manifest.py
            echo "                print(f'Encontrado Deployment. Actualizando imagen de {container[\"image\"]} a {new_image}')" >> update_manifest.py
            echo "                container['image'] = new_image" >> update_manifest.py
            echo "                deployment_updated = True" >> update_manifest.py
            echo "" >> update_manifest.py
            echo "if not deployment_updated:" >> update_manifest.py
            echo "    print('ADVERTENCIA: No se encontró el Deployment o el contenedor flask-app para actualizar')" >> update_manifest.py
            echo "    print('Verificar nombres en el archivo manifest/deployment.yaml')" >> update_manifest.py
            echo "" >> update_manifest.py
            echo "# Guardar todos los documentos de vuelta al archivo" >> update_manifest.py
            echo "with open(manifest_path, 'w') as f:" >> update_manifest.py
            echo "    yaml.dump_all(documents, f, default_flow_style=False)" >> update_manifest.py
            
            # Ejecutar el script
            python update_manifest.py
      - run:
          name: Commit y push de los cambios
          command: |
            cd manifests
            git add .
            git commit -m "Actualizar imagen a $DOCKERHUB_USER/$IMAGE_NAME:$CIRCLE_SHA1"
            # Push usando SSH (que ya debe estar configurado)
            git push origin main

workflows:
  version: 2
  build-test-deploy:
    jobs:
      - build-and-test
      - deploy:
          requires:
            - build-and-test
          filters:
            branches:
              only:
                - main
      - update-k8s-manifests:
          requires:
            - deploy
          filters:
            branches:
              only:
                - main